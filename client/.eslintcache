[{"E:\\BlogAuth\\client\\src\\index.js":"1","E:\\BlogAuth\\client\\src\\reportWebVitals.js":"2","E:\\BlogAuth\\client\\src\\App.js":"3","E:\\BlogAuth\\client\\src\\components\\screens\\PrivateScreen.js":"4","E:\\BlogAuth\\client\\src\\components\\screens\\LoginScreen.js":"5","E:\\BlogAuth\\client\\src\\components\\screens\\RegisterScreen.js":"6","E:\\BlogAuth\\client\\src\\components\\routing\\PrivateRoute.js":"7"},{"size":517,"mtime":1691623115021,"results":"8","hashOfConfig":"9"},{"size":375,"mtime":1691623115021,"results":"10","hashOfConfig":"9"},{"size":744,"mtime":1691679931129,"results":"11","hashOfConfig":"9"},{"size":1342,"mtime":1691680053299,"results":"12","hashOfConfig":"9"},{"size":3378,"mtime":1691679318347,"results":"13","hashOfConfig":"9"},{"size":5086,"mtime":1691679736643,"results":"14","hashOfConfig":"9"},{"size":389,"mtime":1691623115018,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ec9l2u",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"E:\\BlogAuth\\client\\src\\index.js",[],["34","35"],"E:\\BlogAuth\\client\\src\\reportWebVitals.js",[],"E:\\BlogAuth\\client\\src\\App.js",[],"E:\\BlogAuth\\client\\src\\components\\screens\\PrivateScreen.js",["36"],"import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst PrivateScreen = ({ history }) => {\r\n  const [error, setError] = useState(\"\");\r\n  const [privateData, setPrivateData] = useState(\"\");\r\n  const [isLoggedin, setIsLoggedin] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchPrivateDate = async () => {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\r\n        },\r\n      };\r\n\r\n      try {\r\n        const { data } = await axios.get(\"/api/private\", config);\r\n        setPrivateData(data.data);\r\n      } catch (error) {\r\n        localStorage.removeItem(\"authToken\");\r\n        setError(\"You are not authorized please login\");\r\n      }\r\n    };\r\n\r\n    fetchPrivateDate();\r\n  }, []);\r\n\r\n  const logout = () => {\r\n    try {\r\n      axios.get(\"/api/auth/logout\").then(() => {\r\n        console.log(\"user Logged out!!!\");\r\n\r\n      })\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n    localStorage.removeItem(\"authToken\");\r\n    setIsLoggedin(true);\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return error ? (\r\n    <span className=\"error-message\">{error}</span>\r\n  ) : (\r\n    <div> <h1>{privateData}</h1>\r\n      <button onClickCapture={logout}>logout user</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrivateScreen;\r\n","E:\\BlogAuth\\client\\src\\components\\screens\\LoginScreen.js",["37","38"],"import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Login/Login.css\";\r\n\r\nconst LoginScreen = ({ history }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"authToken\")) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [history]);\r\n\r\n  const loginHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const config = {\r\n      header: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"/api/auth/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      localStorage.setItem(\"authToken\", data.token);\r\n\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      setError(error.response.data.error);\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* // <div className=\"login-screen\">\r\n    //   <form onSubmit={loginHandler} className=\"login-screen__form\">\r\n    //     <h3 className=\"login-screen__title\">Login</h3>\r\n    //     {error && <span className=\"error-message\">{error}</span>}\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"email\">Email:</label>\r\n    //       <input\r\n    //         type=\"email\"\r\n    //         required\r\n    //         id=\"email\"\r\n    //         placeholder=\"Email address\"\r\n    //         onChange={(e) => setEmail(e.target.value)}\r\n    //         value={email}\r\n    //         tabIndex={1}\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"password\">\r\n    //         Password:{\" \"}\r\n          \r\n    //       </label>\r\n    //       <input\r\n    //         type=\"password\"\r\n    //         required\r\n    //         id=\"password\"\r\n    //         autoComplete=\"true\"\r\n    //         placeholder=\"Enter password\"\r\n    //         onChange={(e) => setPassword(e.target.value)}\r\n    //         value={password}\r\n    //         tabIndex={2}\r\n    //       />\r\n    //     </div>\r\n    //     <button type=\"submit\" className=\"btn btn-primary\">\r\n    //       Login\r\n    //     </button>\r\n\r\n    //     <span className=\"login-screen__subtext\">\r\n    //       Don't have an account? <Link to=\"/register\">Register</Link>\r\n    //     </span>\r\n    //   </form>\r\n    // </div>\r\n */}\r\n\r\n\r\n      <section id='Login'>\r\n        <div className=\"loginCard\">\r\n          <div className=\"loginText\">\r\n            <h1>Login</h1>\r\n          </div>\r\n\r\n          <form action=\"\" onSubmit={loginHandler}>\r\n            <input type=\"email\" placeholder='Enter your email' onChange={(e) => setEmail(e.target.value)} value={email} tabIndex={1} />\r\n            <input type=\"password\" placeholder='Confirm a password' onChange={(e) => setPassword(e.target.value)} value={password} tabIndex={2} />\r\n\r\n\r\n            <div className=\"check\">\r\n              {/* <input type=\"checkbox\" /> */}\r\n              {/* <p>Remember me</p> */}\r\n              <a href=\"#\">Forget Password?</a>\r\n            </div>\r\n\r\n            <button type=\"submit\">Login Now</button>\r\n\r\n            <p>Don't have an account? <Link to=\"/register\">Register</Link></p>\r\n\r\n          </form>\r\n\r\n\r\n\r\n        </div>\r\n      </section>\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n","E:\\BlogAuth\\client\\src\\components\\screens\\RegisterScreen.js",["39"],"import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./SignUp/SignUp.css\";\r\n\r\nconst RegisterScreen = ({ history }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmpassword, setConfirmPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const registerHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const config = {\r\n      header: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    if (password !== confirmpassword) {\r\n      setPassword(\"\");\r\n      setConfirmPassword(\"\");\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n      return setError(\"Passwords do not match\");\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"/api/auth/register\",\r\n        {\r\n          username,\r\n          email,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n\r\n      localStorage.setItem(\"authToken\", data.token);\r\n\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      setError(error.response.data.error);\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n    <>\r\n      {/* // <div className=\"register-screen\">\r\n    //   <form onSubmit={registerHandler} className=\"register-screen__form\">\r\n    //     <h3 className=\"register-screen__title\">Register</h3>\r\n    //     {error && <span className=\"error-message\">{error}</span>}\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"name\">Username:</label>\r\n    //       <input\r\n    //         type=\"text\"\r\n    //         required\r\n    //         id=\"name\"\r\n    //         placeholder=\"Enter username\"\r\n    //         value={username}\r\n    //         onChange={(e) => setUsername(e.target.value)}\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"email\">Email:</label>\r\n    //       <input\r\n    //         type=\"email\"\r\n    //         required\r\n    //         id=\"email\"\r\n    //         placeholder=\"Email address\"\r\n    //         value={email}\r\n    //         onChange={(e) => setEmail(e.target.value)}\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"password\">Password:</label>\r\n    //       <input\r\n    //         type=\"password\"\r\n    //         required\r\n    //         id=\"password\"\r\n    //         autoComplete=\"true\"\r\n    //         placeholder=\"Enter password\"\r\n    //         value={password}\r\n    //         onChange={(e) => setPassword(e.target.value)}\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"confirmpassword\">Confirm Password:</label>\r\n    //       <input\r\n    //         type=\"password\"\r\n    //         required\r\n    //         id=\"confirmpassword\"\r\n    //         autoComplete=\"true\"\r\n    //         placeholder=\"Confirm password\"\r\n    //         value={confirmpassword}\r\n    //         onChange={(e) => setConfirmPassword(e.target.value)}\r\n    //       />\r\n    //     </div>\r\n    //     <button type=\"submit\" className=\"btn btn-primary\">\r\n    //       Register\r\n    //     </button>\r\n\r\n    //     <span className=\"register-screen__subtext\">\r\n    //       Already have an account? <Link to=\"/login\">Login</Link>\r\n    //     </span>\r\n    //   </form>\r\n    // </div> */}\r\n\r\n      <section id='SignUp'>\r\n        <div className=\"signCard\">\r\n          <div className=\"loginText\">\r\n            <h1>Registration</h1>\r\n          </div>\r\n\r\n          <form action=\"\" onSubmit={registerHandler}>\r\n            <input type=\"text\" required id=\"name\" placeholder=\"Enter username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n            <input type=\"email\" required id=\"email\" placeholder=\"Email address\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n            <input type=\"password\" required id=\"password\" autoComplete=\"true\" placeholder=\"Enter password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n            <input type=\"password\" required id=\"confirmpassword\" autoComplete=\"true\" placeholder=\"Confirm password\" onChange={(e) => setConfirmPassword(e.target.value)}/>\r\n            {/* <input type=\"password\" placeholder='Confirm a password' /> */}\r\n\r\n            {/* <div className=\"uplaod\">\r\n                        <label htmlFor=\"\" style={{fontWeight: 'bold'}}>Upload image</label>\r\n                        <input type=\"file\" style={{ border: 'none', padding: '20px' }} />\r\n                    </div> */}\r\n\r\n\r\n\r\n            {/* <div className=\"check\">\r\n                        <input type=\"checkbox\" />\r\n                        <p>I accept all terms and conditions</p>\r\n                       \r\n                    </div> */}\r\n\r\n            <button>Register Now</button>\r\n\r\n            <p>Already have an account? <Link to=\"/login\">Login</Link></p>\r\n\r\n          </form>\r\n\r\n\r\n\r\n        </div>\r\n      </section>\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterScreen;\r\n","E:\\BlogAuth\\client\\src\\components\\routing\\PrivateRoute.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":7,"column":10,"nodeType":"46","messageId":"47","endLine":7,"endColumn":20},{"ruleId":"44","severity":1,"message":"48","line":9,"column":10,"nodeType":"46","messageId":"47","endLine":9,"endColumn":15},{"ruleId":"49","severity":1,"message":"50","line":104,"column":15,"nodeType":"51","endLine":104,"endColumn":27},{"ruleId":"44","severity":1,"message":"48","line":11,"column":10,"nodeType":"46","messageId":"47","endLine":11,"endColumn":15},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'isLoggedin' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]